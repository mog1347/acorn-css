@import "mixin.scss";
@import "asset/responsive";
@import "asset/helper";
@import "asset/pseudo-class";
@import "asset/container";
@import "asset/flex-layout";
@import "asset/grid-layout";

//$namespace
//$useImportant,
//useImportantOnDisplay,

negativeTag: "n",
pseudoClass: {
    disabled: false,
    suffix: ":",
    list: {
        link: "link",
        visited: "visited",
    "any-link": "any-link",
    hover: "hover",
    active: "active",
    focus: "focus",
    "focus-within": "focus-within",

    checked: "checked",
    disabled: "disabled",
    "read-only": "read-only",
    invalid: "invalid",
    valid: "valid",

    "first-child": "first-child",
    "last-child": "last-child",
    "odd-child": "nth-child(odd)",
    "even-child": "nth-child(even)"
    }
},
responsive: {
    disabled: false,
    suffix: "@",
    type: "up",// or "down"
    breakpoints: {
        // when type is "up"
        xs: null,
        sm: "640px",
        md: "768px",
        lg: "1024px",
        xl: "1280px"
        // when type is "down"
        // xs: "639px",
        // sm: "767px",
        // md: "1023px",
        // lg: "1279px",
        // xl: null
    }
},
container: {
    disabled: false,
    padding: "0",
    centered: true
},
layout: {
    flex: {
        disabled: false,
        column: 12,
        gap: "1rem"
    },
grid: {
    disabled: false,
    column: 12,
    row: 6
}
},






@if not map-get($container, "disabled") {
    $container-centered: map-get($container, "centered");
    $container-padding: map-get($container, "padding");
    @include build-container($container-centered, $container-padding);
}

$flex-layout: map-get($layout, "flex");
@if not map-get($flex-layout,"disabled") {
    $flex-layout-columns: map-get($flex-layout, "columns");
    $flex-layout-gap: map-get($flex-layout, "gap");
    @include build-flex-layout($flex-layout-columns, $flex-layout-gap);
}

$grid-layout: map-get($layout, "grid");
@if not map-get($grid-layout,"disabled") {
    $grid-layout-columns: map-get($grid-layout, "columns");
    $grid-layout-rows: map-get($grid-layout, "rows");
    $grid-layout-gaps: map-get($grid-layout, "gaps");
    @include build-flex-layout($flex-layout-columns, $grid-layout-rows, $grid-layout-gaps);
}

@each $key, $val in $builtin {
    @if map-get($val,"disabled") != true {

        $pseudo-class: map-get($val, "pseudoClass");
        $responsive: map-get($val, "responsive");

        $values: map-get($val, "values");
        $property: map-get($val, "property");
        $class: map-get($val, "class");
        $mixin: map-get($val, "mixin");


        @if $mixin == null {
            @if $class == null {
                $class: $property;
            }

            @if type-of($values) != "map" and type-of($values) != "list" {
                @error "Values must be a map or list in : #{$key}";
            }

            @if $responsive and length($pseudo-class) != 0 {
                @include build-responsive() using($name,$width){
                    @include build-pseudo-class($pseudo-class) using($pseudo-name){
                        @include build-property(){

                        }
                    }
                }
            } @else {


            }


            @include build-property($class, $values, $property);
        } @else {
            @if type-of($mixin) == "string" {
                @include kernel($m);
            } @else if type-of($mixin) == "list" {
                @each $m in $mixin {
                    @include kernel($m);
                }
            }
        }
    }
}